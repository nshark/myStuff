from tkinter import *
from tkinter import messagebox
import random
class Checkers_cell(Canvas):
    def __init__(self, master, coords, color, piece):
        Canvas.__init__(self, master, bg=color, height = 25, width = 25)
        self.coords = coords
        self.master = master
        self.hasPiece = piece
        self.bind('<Button-1>', self.move)
        self.color = color
    def draw(self):
        if self.hasPiece[0]:
            self.create_oval(5,5,22,22,fill=self.hasPiece[1])
        else:
            self.delete("all")
    def getColor(self):
        return self.color
    def move(self, event):
        if not self.master.getMove() and self.hasPiece == (True, self.master.getTurn()):
            self.hasPiece = (False, '')
            self.draw()
            self.master.toggleMove()
            self.master.storeCell(self.coords)
        elif self.hasPiece[0] == False and self.master.getMove() and self.master.isLegal(self.coords):
            self.hasPiece = (True, self.master.getTurn())
            self.draw()
            self.master.toggleMove()
            self.master.toggleTurn()
class Checkers_Grid(Frame):
    def __init__(self, master):
        Frame.__init__(self,master,bg='dim grey')
        self.grid()
        self.turn = 'red'
        self.move = False
        self.units = {}
        for x in range(8):
            if x % 2 == 0:
                color = 'white'
            else:
                color = 'green'
            for y in range(8):
                piece = (False, '')
                if color == 'green':
                    if y < 3: 
                        piece = (True, 'white')
                    if y > 4:
                        piece = (True, 'red')
                self.units[(x, y)] = Checkers_cell(self, (x, y), color, piece)
                self.units[(x, y)].grid(row=y,column=x)
                self.units[(x, y)].draw()
                if color == 'white':
                    color = 'green'
                else:
                    color = 'white'
    def getMove(self):
        return self.move
    def toggleMove(self):
        if self.move:
            self.move = False
        else:
            self.move = True
    def toggleTurn(self):
        if self.turn == 'white':
            self.turn = 'red'
        else:
            self.turn = 'white'
    def getTurn(self):
        return self.turn
    def storeCell(self, cell):
        self.cell = cell
    def isLegal(self, coords):
        if self.units[coords].getColor == 'white':
            return False
        elif (self.cell[0] == coords[0] + 1 and self.cell[1] == coords[1] + 1) or (self.cell[0] == coords[0] - 1 and self.cell[1] == coords[1] + 1) and self.turn == 'red':
            return True
        elif (self.cell[0] == coords[0] + 1 and self.cell[1] == coords[1] - 1) or (self.cell[0] == coords[0] - 1 and self.cell[1] == coords[1] - 1) and self.turn == 'white':
            return True
        else:
            return False
def checkers():
    root = Tk()
    root.title('Checkers')
    sg = Checkers_Grid(root)
    root.mainloop()
checkers()
